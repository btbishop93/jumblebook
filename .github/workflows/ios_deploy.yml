name: iOS TestFlight Deployment

on:
  push:
    branches: [main]
    paths:
      - 'lib/**'
      - 'ios/**'
      - 'pubspec.yaml'
      - 'pubspec.lock'
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type (patch/minor/major)'
        required: false
        default: 'patch'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

env:
  MARKETING_VERSION: ${{ vars.MARKETING_VERSION || '3.1.0' }}
  BUILD_NUMBER: ${{ vars.BUILD_NUMBER || 1 }}

permissions:
  actions: write
  contents: read
  repository-projects: write
  id-token: write

jobs:
  # Job 1: Setup and prepare dependencies
  setup:
    name: Setup Dependencies
    runs-on: macos-latest
    outputs:
      new_marketing_version: ${{ steps.version.outputs.new_marketing_version }}
      bundle_id: ${{ steps.profile.outputs.bundle_id }}
      profile_name: ${{ steps.profile.outputs.profile_name }}
      profile_uuid: ${{ steps.profile.outputs.profile_uuid }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Cache Flutter dependencies
      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ~/.cocoapods
            ~/Library/Caches/CocoaPods
            **/.flutter-plugins-dependencies
            **/.dart_tool
            **/.pub
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.0'
          channel: 'stable'
          cache: true

      - name: Install Flutter dependencies
        run: flutter pub get

      - name: Create Firebase configuration file
        env:
          GOOGLE_SERVICE_INFO_PLIST: ${{ secrets.GOOGLE_SERVICE_INFO_PLIST }}
        run: |
          echo "$GOOGLE_SERVICE_INFO_PLIST" | base64 --decode > ios/Runner/GoogleService-Info.plist
          echo "Created GoogleService-Info.plist"

      # Cache Ruby gems (including CocoaPods)
      - name: Cache Ruby gems
        uses: actions/cache@v4
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      # Cache CocoaPods
      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.2'
          bundler-cache: true

      - name: Install CocoaPods dependencies
        run: |
          # Setup Ruby bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
          
          # Install CocoaPods
          cd ios
          bundle exec pod install --repo-update
          cd ..

      - name: Calculate new version
        id: version
        run: |
          IFS='.' read -r major minor patch <<< "$MARKETING_VERSION"
          case '${{ github.event.inputs.version_bump }}' in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            *)
              patch=$((patch + 1))
              ;;
          esac
          echo "new_marketing_version=$major.$minor.$patch" >> $GITHUB_OUTPUT
          echo "Using build number: $BUILD_NUMBER"

      - name: Process provisioning profile
        id: profile
        env:
          IOS_PROFILE_BASE64: ${{ secrets.IOS_PROFILE_BASE64 }}
        run: |
          # Create provisioning profiles directory
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles

          # Install iOS App Store profile
          PROFILE_PATH=~/Library/MobileDevice/Provisioning\ Profiles/Jumblebook_Distribution.mobileprovision
          echo "$IOS_PROFILE_BASE64" | base64 --decode > "$PROFILE_PATH"
          
          # Extract UUID from provisioning profile
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" /dev/stdin <<< $(/usr/bin/security cms -D -i "$PROFILE_PATH"))
          echo "Provisioning profile UUID: $PROFILE_UUID"
          
          # Extract profile name from provisioning profile
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c "Print :Name" /dev/stdin <<< $(/usr/bin/security cms -D -i "$PROFILE_PATH"))
          echo "Provisioning profile name: $PROFILE_NAME"
          
          # Extract application identifier from provisioning profile
          APP_ID=$(/usr/libexec/PlistBuddy -c "Print :Entitlements:application-identifier" /dev/stdin <<< $(/usr/bin/security cms -D -i "$PROFILE_PATH"))
          echo "Application identifier in profile: $APP_ID"
          
          # Extract bundle identifier from application identifier (remove team prefix)
          BUNDLE_ID=$(echo "$APP_ID" | sed 's/^[A-Z0-9]*\.//')
          echo "Bundle identifier in profile: $BUNDLE_ID"
          
          # Output values for next jobs
          echo "bundle_id=$BUNDLE_ID" >> $GITHUB_OUTPUT
          echo "profile_name=$PROFILE_NAME" >> $GITHUB_OUTPUT
          echo "profile_uuid=$PROFILE_UUID" >> $GITHUB_OUTPUT
          
          # Save profile for artifact
          mkdir -p ios/provisioning
          cp "$PROFILE_PATH" ios/provisioning/

      # Upload artifacts for next jobs
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-artifacts
          path: |
            ios/
            pubspec.lock
            pubspec.yaml
            Gemfile
            Gemfile.lock
            vendor/bundle/

  # Job 2: Build the iOS app
  build:
    name: Build iOS App
    needs: setup
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Download artifacts from setup job
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ios-build-artifacts
          path: .

      # Cache Xcode build
      - name: Cache Xcode build
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData
            ios/build
          key: ${{ runner.os }}-xcode-${{ hashFiles('ios/Runner.xcworkspace/**/*.pbxproj') }}-${{ hashFiles('ios/Podfile.lock') }}-${{ env.BUILD_NUMBER }}
          restore-keys: |
            ${{ runner.os }}-xcode-

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.0'
          channel: 'stable'
          cache: true

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.2'
          bundler-cache: true

      - name: Fix script permissions
        run: |
          # Fix permissions for all scripts in the Pods directory
          find ios/Pods -name "*.sh" -type f -exec chmod +x {} \;
          echo "Fixed permissions for Pod scripts"

      - name: Import Certificate
        env:
          DISTRIBUTION_CERTIFICATE_BASE64: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_BASE64 }}
          CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: temporary
        run: |
          # Create variables
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Create keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import distribution certificate
          CERTIFICATE_PATH=$RUNNER_TEMP/distribution.p12
          echo $DISTRIBUTION_CERTIFICATE_BASE64 | base64 --decode -o $CERTIFICATE_PATH
          security import $CERTIFICATE_PATH -P "$CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          rm $CERTIFICATE_PATH

          # Create provisioning profiles directory
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          
          # Copy provisioning profile
          cp ios/provisioning/Jumblebook_Distribution.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          
          # Set permissions
          sudo chown -R $USER:staff ~/Library/MobileDevice/Provisioning\ Profiles/

          # Set key partition list
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # List keychains
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Update iOS version
        run: |
          cd ios
          agvtool new-marketing-version "${{ needs.setup.outputs.new_marketing_version }}"
          agvtool new-version -all $BUILD_NUMBER
          cd ..

      - name: Build iOS App
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          BUNDLE_ID: ${{ needs.setup.outputs.bundle_id }}
          PROFILE_NAME: ${{ needs.setup.outputs.profile_name }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_KEY_ISSUER_ID: ${{ secrets.APPLE_API_KEY_ISSUER_ID }}
          APPLE_API_PRIVATE_KEY: ${{ secrets.APPLE_API_PRIVATE_KEY }}
        run: |
          # Clean build directory
          cd ios
          rm -rf build
          cd ..
          
          # Set up App Store Connect API for xcodebuild
          mkdir -p ~/.appstoreconnect/private_keys
          echo "$APPLE_API_PRIVATE_KEY" > ~/.appstoreconnect/private_keys/AuthKey_${APPLE_API_KEY_ID}.p8
          
          # Build Flutter iOS app with reduced verbosity
          flutter build ios --release --no-codesign --quiet
          
          # Create exportOptions.plist for iOS
          cat > ios/exportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store-connect</string>
              <key>teamID</key>
              <string>$APPLE_TEAM_ID</string>
              <key>destination</key>
              <string>upload</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>$BUNDLE_ID</key>
                  <string>$PROFILE_NAME</string>
              </dict>
              <key>signingCertificate</key>
              <string>Apple Distribution</string>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>compileBitcode</key>
              <false/>
              <key>distributionBundleIdentifier</key>
              <string>$BUNDLE_ID</string>
              <key>iCloudContainerEnvironment</key>
              <string>Production</string>
              <key>generateAppStoreInformation</key>
              <true/>
              <key>appStoreConnectAPIKey</key>
              <dict>
                  <key>keyID</key>
                  <string>$APPLE_API_KEY_ID</string>
                  <key>issuerID</key>
                  <string>$APPLE_API_KEY_ISSUER_ID</string>
                  <key>privateKeyPath</key>
                  <string>~/.appstoreconnect/private_keys/AuthKey_${APPLE_API_KEY_ID}.p8</string>
              </dict>
          </dict>
          </plist>
          EOF
          
          # Archive with reduced verbosity
          cd ios
          # Set code signing settings for the main app target only
          xcrun xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath build/Runner.xcarchive \
            -destination 'generic/platform=iOS' \
            -allowProvisioningUpdates \
            DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_NAME" \
            OTHER_CODE_SIGN_FLAGS="--keychain $RUNNER_TEMP/app-signing.keychain-db" \
            MARKETING_VERSION=${{ needs.setup.outputs.new_marketing_version }} \
            CURRENT_PROJECT_VERSION=$BUILD_NUMBER \
            ONLY_ACTIVE_ARCH=NO \
            EXCLUDED_ARCHS=armv7 \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            -quiet \
            clean archive

          # Prepare archive for export - remove provisioning profile from frameworks
          echo "Preparing archive for export..."
          find build/Runner.xcarchive/Products/Applications -name "*.framework" -type d | while read -r framework; do
            rm -rf "$framework/embedded.mobileprovision" 2>/dev/null || true
            
            # Check if Info.plist exists and modify it
            if [ -f "$framework/Info.plist" ]; then
              /usr/libexec/PlistBuddy -c "Delete :CFBundleResourceSpecification" "$framework/Info.plist" 2>/dev/null || true
            fi
          done

          # Export IPA
          echo "Exporting IPA..."
          xcrun xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportPath build/ios \
            -exportOptionsPlist exportOptions.plist \
            -allowProvisioningUpdates

      # Upload IPA for next job
      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: ios/build/ios/*.ipa
          retention-days: 1

  # Job 3: Deploy to TestFlight
  deploy:
    name: Deploy to TestFlight
    needs: [setup, build]
    runs-on: macos-latest
    
    steps:
      # Download IPA from build job
      - name: Download IPA
        uses: actions/download-artifact@v4
        with:
          name: ios-ipa
          path: ios-ipa

      - name: Set up App Store Connect API
        env:
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_KEY_ISSUER_ID: ${{ secrets.APPLE_API_KEY_ISSUER_ID }}
          APPLE_API_PRIVATE_KEY: ${{ secrets.APPLE_API_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.appstoreconnect/private_keys
          echo "$APPLE_API_PRIVATE_KEY" > ~/.appstoreconnect/private_keys/AuthKey_${APPLE_API_KEY_ID}.p8
          chmod 600 ~/.appstoreconnect/private_keys/AuthKey_${APPLE_API_KEY_ID}.p8

      - name: Upload iOS App to TestFlight
        env:
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_KEY_ISSUER_ID: ${{ secrets.APPLE_API_KEY_ISSUER_ID }}
        run: |
          # Find the IPA file
          IPA_PATH=$(find ios-ipa -name "*.ipa" -type f)
          if [ -z "$IPA_PATH" ]; then
            echo "Error: No IPA file found in ios-ipa directory"
            exit 1
          fi
          echo "Found IPA at: $IPA_PATH"

          # Upload iOS build
          echo "Uploading iOS build..."
          xcrun altool --upload-app --type ios \
            --file "$IPA_PATH" \
            --apiKey "$APPLE_API_KEY_ID" \
            --apiIssuer "$APPLE_API_KEY_ISSUER_ID" \
            --verbose

      - name: Update GitHub variables
        if: success()
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          # Update marketing version
          gh api -X PATCH /repos/${{ github.repository }}/actions/variables/MARKETING_VERSION \
            -f value="${{ needs.setup.outputs.new_marketing_version }}"

          # Increment build number
          NEW_BUILD_NUMBER=$((BUILD_NUMBER + 1))
          gh api -X PATCH /repos/${{ github.repository }}/actions/variables/BUILD_NUMBER \
            -f value="$NEW_BUILD_NUMBER"

      # Cleanup
      - name: Clean up secrets
        if: always()
        run: |
          rm -f ~/.appstoreconnect/private_keys/AuthKey_${APPLE_API_KEY_ID}.p8 