name: Simple iOS TestFlight Deployment

on:
  push:
    branches: [master]  # Adjusted to master based on your previous log
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.0'

      - name: Install dependencies
        run: flutter pub get

      - name: Create Firebase configuration file
        env:
          GOOGLE_SERVICE_INFORMATION_PLIST: ${{ secrets.GOOGLE_SERVICE_INFORMATION_PLIST }}
        run: |
          echo "$GOOGLE_SERVICE_INFORMATION_PLIST" | base64 --decode > ios/Runner/GoogleService-Info.plist
          echo "Created GoogleService-Info.plist"

      - name: Build iOS app
        run: flutter build ios --release --no-codesign

      - name: Set up keychain
        run: |
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          KEYCHAIN_PASSWORD=temporary
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

      - name: Import distribution certificate
        env:
          IOS_DISTRIBUTION_CERTIFICATE_BASE64: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        run: |
          echo "$IOS_DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode > distribution.p12
          security import distribution.p12 -k "$KEYCHAIN_PATH" -P "$IOS_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12
          rm distribution.p12
          # Set key partition list for signing
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "temporary" "$KEYCHAIN_PATH"

      - name: Import provisioning profile
        env:
          IOS_PROFILE_BASE64: ${{ secrets.IOS_PROFILE_BASE64 }}
        run: |
          echo "$IOS_PROFILE_BASE64" | base64 --decode > profile.mobileprovision
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          mv profile.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/"
          sudo chown -R "$USER:staff" "$HOME/Library/MobileDevice/Provisioning Profiles/"

      - name: Archive the app
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          PROVISIONING_PROFILE_NAME: ${{ secrets.PROVISIONING_PROFILE_NAME }}
        run: |
          cd ios
          xcodebuild archive \
            -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath build/Runner.xcarchive \
            -destination 'generic/platform=iOS' \
            DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            PROVISIONING_PROFILE_SPECIFIER="$PROVISIONING_PROFILE_NAME" \
            OTHER_CODE_SIGN_FLAGS="--keychain $RUNNER_TEMP/app-signing.keychain-db" \
            -allowProvisioningUpdates \
            clean archive

      - name: Create build directory
        run: mkdir -p ios/build

      - name: Create exportOptions.plist
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          BUNDLE_IDENTIFIER: ${{ secrets.BUNDLE_IDENTIFIER }}
          PROVISIONING_PROFILE_NAME: ${{ secrets.PROVISIONING_PROFILE_NAME }}
        run: |
          cat << EOF > ios/build/options.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store-connect</string>
            <key>teamID</key>
            <string>${APPLE_TEAM_ID}</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${BUNDLE_IDENTIFIER}</key>
              <string>${PROVISIONING_PROFILE_NAME}</string>
            </dict>
            <key>signingCertificate</key>
            <string>Apple Distribution</string>
          </dict>
          </plist>
          EOF

      - name: Debug exportOptions.plist
        run: |
          cat ios/build/options.plist
          echo "Verifying plist syntax:"
          plutil -lint ios/build/options.plist

      - name: Export IPA
        run: |
          cd ios
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportPath build \
            -exportOptionsPlist build/options.plist \
            -allowProvisioningUpdates

      - name: Set up App Store Connect API key
        env:
          APPLE_API_PRIVATE_KEY: ${{ secrets.APPLE_API_PRIVATE_KEY }}
        run: |
          mkdir -p "$HOME/.appstoreconnect/private_keys"
          echo "$APPLE_API_PRIVATE_KEY" > "$HOME/.appstoreconnect/private_keys/AuthKey_${{ secrets.APPLE_API_KEY }}.p8"

      - name: Upload to TestFlight
        env:
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
          APPLE_API_KEY_ISSUER_ID: ${{ secrets.APPLE_API_KEY_ISSUER_ID }}
        run: |
          IPA_PATH="ios/build/Runner.ipa"
          xcrun altool --upload-app \
            -f "$IPA_PATH" \
            --type ios \
            --apiKey "$APPLE_API_KEY" \
            --apiIssuer "$APPLE_API_KEY_ISSUER_ID" \
            --verbose