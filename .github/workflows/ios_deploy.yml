name: Push iOS build on TestFlight

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: 'patch'

jobs:
  ios_deployment:
    runs-on: macos-latest
    env:
      APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APPLE_API_PRIVATE_KEY }}
      APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APPLE_API_KEY_ISSUER_ID }}
      APP_STORE_CONNECT_KEY_IDENTIFIER: ${{ secrets.APPLE_API_KEY }}
      APP_STORE_APP_ID: ${{ secrets.APP_STORE_APP_ID }}
      DISTRIBUTION_CERTIFICATE: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_BASE64 }}
      DISTRIBUTION_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
      PROVISIONING_PROFILE: ${{ secrets.IOS_PROFILE_BASE64 }}
      GOOGLE_SERVICE_INFO_PLIST: ${{ secrets.GOOGLE_SERVICE_INFO_PLIST }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set up Flutter SDK
        uses: flutter-actions/setup-flutter@v3
        with:
          channel: stable
          version: 3.24.0

      - name: Install dependencies & Lint check
        run: |
          flutter clean
          flutter pub get
          flutter analyze --fatal-infos
          
      - name: Install the CodeMagic CLI
        run: pip install codemagic-cli-tools

      - name: Initialize keychain
        run: keychain initialize

      - name: Set up Provisioning Profile
        run: |
          PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILES_HOME"
          PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
          echo ${PROVISIONING_PROFILE} | base64 --decode > "$PROFILE_PATH"
          echo "Saved provisioning profile $PROFILE_PATH"   

      - name: Set up Distribution Certificate
        run: |
          echo $DISTRIBUTION_CERTIFICATE | base64 --decode > /tmp/certificate.p12
          keychain add-certificates --certificate /tmp/certificate.p12 --certificate-password $DISTRIBUTION_CERTIFICATE_PASSWORD

      - name: Set up Google Service Info plist
        run: |
          mkdir -p ios/Runner
          echo $GOOGLE_SERVICE_INFO_PLIST | base64 --decode > ios/Runner/GoogleService-Info.plist
          echo "Added GoogleService-Info.plist to ios/Runner directory"

      - name: Set up Code signing settings on Xcode project
        run: xcode-project use-profiles

      - name: Update Version
        run: |
          set -x  # Enable debug mode to see each command
          file='VERSION'
          echo "Checking for VERSION file..."
          if [ -f "$file" ]; then
            echo "VERSION file exists"
            echo "Current file contents:"
            cat "$file"
            
            echo "Reading version components..."
            # Read the version and split it into parts
            version=$(cat "$file" | tr -d '[:space:]')  # Remove any whitespace
            IFS='.' read -r -a version_parts <<< "$version"
            
            # Set default values for missing components
            major="${version_parts[0]:-0}"
            minor="${version_parts[1]:-0}"
            patch="${version_parts[2]:-0}"
            
            # Validate that we got numbers
            if ! [[ "$major" =~ ^[0-9]+$ ]] || ! [[ "$minor" =~ ^[0-9]+$ ]] || ! [[ "$patch" =~ ^[0-9]+$ ]]; then
              echo "Error: Version components must be numbers. Got major=$major minor=$minor patch=$patch"
              exit 1
            fi
            
            echo "Current version: major=$major minor=$minor patch=$patch"
            
            echo "Getting version bump type from input..."
            echo "Raw input value: ${{ github.event.inputs.version_bump }}"
            bump_type="${{ github.event.inputs.version_bump }}"
            echo "Assigned bump_type: $bump_type"
            
            if [ -z "$bump_type" ]; then
              echo "No bump type provided, defaulting to patch"
              bump_type="patch"
            fi
            
            echo "Using bump type: $bump_type"
            
            case "$bump_type" in
              "major")
                echo "Performing major version bump"
                major=$((major + 1))
                minor=0
                patch=0
                ;;
              "minor")
                echo "Performing minor version bump"
                minor=$((minor + 1))
                patch=0
                ;;
              "patch")
                echo "Performing patch version bump"
                patch=$((patch + 1))
                ;;
              *)
                echo "Invalid version bump type: '$bump_type'"
                exit 1
                ;;
            esac
            
            new_version="$major.$minor.$patch"
            echo "Writing new version: $new_version"
            echo "$new_version" > "$file"
            echo "Updated version to $new_version"
            
            echo "New file contents:"
            cat "$file"
          else
            echo "VERSION file does not exist, creating with initial version"
            echo "1.0.0" > "$file"
            echo "Created initial version 1.0.0"
            
            echo "New file contents:"
            cat "$file"
          fi

      - name: Build IPA for Distribution
        run: |
          file='VERSION'
          fileData=`cat $file`
          IFS='.'
          read -a versionValue <<< "$fileData"
          buildNumber=$(( ${versionValue[0]} * 1000000 + ${versionValue[1]} * 10000 + ${{github.run_number}} ))
          IFS=''
          buildName="${versionValue[0]}.${versionValue[1]}.${{github.run_number}}"
          echo "Uploading build $buildName"
          flutter build ipa --release --build-number=$buildNumber --build-name=$buildName --export-options-plist=$HOME/export_options.plist

      - name: Upload IPA to App Store Connect
        run: |
          APP_FILE=$(find $(pwd) -name "*.ipa")
          app-store-connect publish \
          --path "$APP_FILE"

